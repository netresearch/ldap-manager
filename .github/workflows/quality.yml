name: Quality Assurance

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run quality checks weekly on Sundays at 02:00 UTC
    - cron: "0 2 * * 0"

# Default read-only permissions for security hardening
permissions:
  contents: read

jobs:
  lint:
    name: Linting & Static Analysis
    runs-on: ubuntu-latest

    permissions:
      contents: read
      security-events: write # Required for CodeQL

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: "1.25.3"
          cache: true

      - name: Install pnpm
        uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4.2.0

      - name: Set up Node.js
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
        with:
          node-version: "24"
          cache: "pnpm"

      - name: Install templ CLI
        run: go install github.com/a-h/templ/cmd/templ@latest

      - name: Install dependencies
        run: |
          go mod download
          pnpm install

      - name: Build assets
        run: pnpm build:assets

      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.5.0

      - name: Run golangci-lint
        run: golangci-lint run --config=.golangci.yml --timeout=5m

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run staticcheck
        run: staticcheck ./...

      - name: Run gosec security scanner
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec -fmt sarif -out gosec-results.sarif ./...
        continue-on-error: true

      - name: Upload gosec results
        uses: github/codeql-action/upload-sarif@5fe9434cd24fe243e33e7f3305f8a5b519b70280 # v4.31.1
        if: always() && hashFiles('gosec-results.sarif') != ''
        with:
          sarif_file: gosec-results.sarif

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  test:
    name: Testing & Coverage
    runs-on: ubuntu-latest

    permissions:
      contents: read
      checks: write # Required for test reporting

    services:
      # Start OpenLDAP for integration tests
      openldap:
        image: osixia/openldap:1.5.0
        env:
          LDAP_ORGANISATION: Test Org
          LDAP_DOMAIN: test.local
          LDAP_ADMIN_PASSWORD: admin
        ports:
          - 1389:389
        options: --health-cmd="ldapsearch -x -H ldap://localhost -b dc=test,dc=local -D 'cn=admin,dc=test,dc=local' -w admin" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: "1.25.3"
          cache: true

      - name: Install pnpm
        uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4.2.0

      - name: Set up Node.js
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
        with:
          node-version: "24"
          cache: "pnpm"

      - name: Install templ CLI
        run: go install github.com/a-h/templ/cmd/templ@latest

      - name: Install dependencies
        run: |
          go mod download
          pnpm install

      - name: Build assets
        run: pnpm build:assets

      - name: Run tests with coverage
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Generate coverage report
        run: |
          go tool cover -html=coverage.out -o coverage.html
          go tool cover -func=coverage.out

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        if: always()
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Run benchmarks
        run: go test -bench=. -benchmem ./... | tee benchmark-results.txt

      - name: Upload test results
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        if: always()
        with:
          name: test-results
          path: |
            coverage.out
            coverage.html
            benchmark-results.txt

  build:
    name: Build Verification
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: "1.25.3"
          cache: true

      - uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4.2.0
        name: Install pnpm
        with:
          run_install: false

      - name: Set up Node.js
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
        with:
          node-version: "24"
          cache: "pnpm"

      - name: Install templ CLI
        run: go install github.com/a-h/templ/cmd/templ@latest

      - name: Install dependencies
        run: |
          go mod download
          pnpm install

      - name: Build assets
        run: pnpm build:assets

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          BINARY_NAME="ldap-manager-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          go build -ldflags="-s -w" -trimpath -o "${BINARY_NAME}" ./cmd/ldap-manager

      - name: Upload build artifacts
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: binary-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ldap-manager-*

  docker-quality:
    name: Docker Quality Checks
    runs-on: ubuntu-latest

    permissions:
      contents: read
      security-events: write # Required for SARIF uploads

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@2332a7b74a6de0dda2e2221d575162eba76ba5e5 # v3.3.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif

      - name: Upload Dockerfile lint results
        uses: github/codeql-action/upload-sarif@5fe9434cd24fe243e33e7f3305f8a5b519b70280 # v4.31.1
        if: always()
        with:
          sarif_file: hadolint-results.sarif

      - name: Get build timestamp
        id: timestamp
        run: echo "date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Build Docker image for testing
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          target: runner
          push: false
          tags: ldap-manager:test
          # GitHub Actions cache enables BuildKit cache mounts
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Pass build metadata for OCI labels
          build-args: |
            BUILD_DATE=${{ steps.timestamp.outputs.date }}
            VCS_REF=${{ github.sha }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        with:
          image-ref: "ldap-manager:test"
          format: "sarif"
          output: "trivy-results.sarif"
        continue-on-error: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@5fe9434cd24fe243e33e7f3305f8a5b519b70280 # v4.31.1
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: "trivy-results.sarif"

  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest

    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: "1.25.3"

      - name: Install templ CLI
        run: go install github.com/a-h/templ/cmd/templ@latest

      - name: Install dependencies
        run: go mod download

      - name: Generate templates
        run: templ generate

      - name: Run Go vulnerability scanner
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      - name: Install pnpm
        uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4.2.0

      - name: Set up Node.js
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
        with:
          node-version: "24"

      - name: Install Node dependencies
        run: pnpm install

      - name: Audit Node dependencies
        run: pnpm audit --audit-level moderate

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint, test, build, docker-quality, dependency-check]
    if: always()

    steps:
      - name: Check quality gate
        run: |
          echo "Quality check results:"
          echo "Linting: ${{ needs.lint.result }}"
          echo "Testing: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Docker: ${{ needs.docker-quality.result }}"
          echo "Dependencies: ${{ needs.dependency-check.result }}"

          # Fail if any critical checks failed
          if [[ "${{ needs.lint.result }}" != "success" || "${{ needs.test.result }}" != "success" ]]; then
            echo "❌ Quality gate failed - critical checks did not pass"
            exit 1
          fi

          echo "✅ Quality gate passed"
