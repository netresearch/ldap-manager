# golangci-lint configuration for LDAP Manager
# Comprehensive static analysis and linting configuration

run:
  timeout: 5m
  tests: true
  modules-download-mode: readonly

output:
  formats:
    - format: colored-line-number
  print-issued-lines: true
  print-linter-name: true

linters-settings:
  # Cyclomatic complexity
  cyclop:
    max-complexity: 15
    package-average: 10.0
    skip-tests: true

  # Duplicate code detection
  dupl:
    threshold: 100

  # Error handling
  errcheck:
    check-type-assertions: true
    check-blank: true
    exclude-functions:
      - (*github.com/gofiber/fiber/v2.Ctx).JSON
      - (*github.com/gofiber/fiber/v2.Ctx).SendString
      - (*github.com/gofiber/fiber/v2.Ctx).Redirect

  # Unused parameters
  funlen:
    lines: 100
    statements: 50

  # Cognitive complexity
  gocognit:
    min-complexity: 20

  # Line length
  lll:
    line-length: 120

  # Misspelled words
  misspell:
    locale: US

  # Naked returns
  nakedret:
    max-func-lines: 30

  # Dead code
  unused:
    check-exported: false

  # Whitespace
  wsl:
    strict-append: true
    allow-assign-and-call: true
    allow-multiline-assign: true
    allow-case-traling-whitespace: true

  # Import ordering
  goimports:
    local-prefixes: github.com/netresearch/ldap-manager

  # Security
  gosec:
    severity: medium
    confidence: medium
    excludes:
      - G107 # URL provided to HTTP request as taint input - acceptable for health checks

  # Code simplification
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - whyNoLint
      - hugeParam

  # Struct alignment
  maligned:
    suggest-new: true

  # Interface compliance
  interfacer:
    check-required: true

linters:
  enable:
    # Enabled by default
    - errcheck # Check error handling
    - gosimple # Simplify code
    - govet # Go vet
    - ineffassign # Detect ineffectual assignments
    - staticcheck # Staticcheck analysis
    - unused # Find unused code

    # Additional quality checks
    - asciicheck # Check for non-ASCII identifiers
    - bodyclose # Check HTTP response body closes
    - cyclop # Check cyclomatic complexity
    - dupl # Check code duplication
    - errname # Check error naming conventions
    - errorlint # Find error handling issues
    - exhaustive # Check switch statements
    - copyloopvar # Check loop variable copies (replaces exportloopref)
    - funlen # Check function length
    - gochecknoinits # Check for init functions
    - gocognit # Check cognitive complexity
    - goconst # Find repeated strings that could be constants
    - gocritic # Comprehensive Go source code linter
    - gofmt # Check formatting
    - goimports # Check imports
    # Commented out - duplicated in disable section
    # - gomnd         # Check magic numbers
    - gosec # Security analysis
    - lll # Check line length
    - makezero # Find slice declarations with non-zero initial length
    - misspell # Find misspelled words
    - nakedret # Find naked returns
    - nilerr # Find incorrect nil error returns
    - nlreturn # Check newlines before returns
    - noctx # Find HTTP requests without context
    - prealloc # Find slice declarations that could be preallocated
    - predeclared # Find code that shadows predeclared identifiers
    - revive # Fast configurable linter
    - rowserrcheck # Check SQL rows.Err
    - sqlclosecheck # Check SQL Close calls
    - tparallel # Detect inappropriate usage of t.Parallel
    - unconvert # Remove unnecessary type conversions
    - unparam # Find unused function parameters
    - wastedassign # Find wasted assignments
    - whitespace # Check whitespace issues

  disable:
    # Disabled linters (can be enabled as needed)
    - gochecknoglobals # Allow some globals for configuration
    - godot # Don't enforce comments ending with period
    - godox # Allow TODO/FIXME comments
    - err113 # Don't enforce wrapped errors everywhere (renamed from goerr113)
    - goheader # No header requirements
    - wrapcheck # Don't require all errors to be wrapped

issues:
  exclude-use-default: false
  exclude-files:
    - ".*_templ.go$" # Skip generated templ files
  exclude-dirs:
    - bin
    - node_modules
  exclude-rules:
    # Disable specific linters for test files
    - path: _test\.go
      linters:
        - funlen
        - gocognit
        - gosec
        - cyclop

    # Disable for generated files
    - path: ".*_templ\\.go"
      linters:
        - all

    # Allow long lines in generated code
    - source: "^//go:generate"
      linters:
        - lll

    # Ignore complexity in main.go (entry point)
    - path: main\.go
      linters:
        - gocognit
        - cyclop

  # Maximum issues count per one linter
  max-issues-per-linter: 50

  # Maximum count of issues with the same text
  max-same-issues: 10

  # Show only new issues created after git revision
  new: false

  # Fix found issues (if supported by linter)
  fix: false
